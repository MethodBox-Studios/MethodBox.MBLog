<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MethodBox.MBLog</name>
    </assembly>
    <members>
        <member name="T:MethodBox.MBLog.DataType.LogFileType">
            <summary>
            用于表示MBLogger运行时中的公共数据类型。
            </summary>
            <summary>
            用于表示日志存储或来自的文件类型。
            </summary>
        </member>
        <member name="F:MethodBox.MBLog.DataType.LogFileType.TextFile">
            <summary>
            表示文本文件（*.txt）
            </summary>
        </member>
        <member name="F:MethodBox.MBLog.DataType.LogFileType.Json">
            <summary>
            表示Json文件（*.json）
            </summary>
        </member>
        <member name="F:MethodBox.MBLog.DataType.LogFileType.DataBase">
            <summary>
            表示数据库文件（*.db）
            </summary>
        </member>
        <member name="T:MethodBox.MBLog.DataType.LogType">
            <summary>
            用于表示日志的等级。
            </summary>
        </member>
        <member name="F:MethodBox.MBLog.DataType.LogType.Information">
            <summary>
            表示日志等级为信息
            </summary>
        </member>
        <member name="F:MethodBox.MBLog.DataType.LogType.Caution">
            <summary>
            表示日志等级为提示
            </summary>
        </member>
        <member name="F:MethodBox.MBLog.DataType.LogType.Warning">
            <summary>
            表示日志等级为警告
            </summary>
        </member>
        <member name="F:MethodBox.MBLog.DataType.LogType.Error">
            <summary>
            表示日志等级为错误
            </summary>
        </member>
        <member name="T:MethodBox.MBLog.DataType.TrackType">
            <summary>
            用于表示对日志跟踪器设置的模式。
            </summary>
        </member>
        <member name="F:MethodBox.MBLog.DataType.TrackType.Regex">
            <summary>
            表示对日志内容的正则表达式检索
            </summary>
        </member>
        <member name="F:MethodBox.MBLog.DataType.TrackType.KeyWord">
            <summary>
            表示对日志内容的关键字检索
            </summary>
        </member>
        <member name="F:MethodBox.MBLog.DataType.TrackType.Level">
            <summary>
            表示对日志等级的检索
            </summary>
        </member>
        <member name="F:MethodBox.MBLog.DataType.TrackType.Call">
            <summary>
            表示对日志发起方的检索
            </summary>
        </member>
        <member name="T:MethodBox.MBLog.DataType.LogStruct">
            <summary>
            用于表示日志类型的结构体。
            </summary>
        </member>
        <member name="M:MethodBox.MBLog.DataType.LogStruct.#ctor(System.String[],System.String,System.Boolean,System.Boolean)">
            <summary>
            提供含有默认值的公开构造函数。
            </summary>
            <param name="callerInfoStrings">对日志的调起者</param>
            <param name="logInfo">日志内容</param>
            <param name="print">是否打印到控制台</param>
            <param name="save">是否保存到文件</param>
            <see cref="T:MethodBox.MBLog.DataType.LogType"/>
        </member>
        <member name="F:MethodBox.MBLog.DataType.LogStruct.CallerInfoStrings">
            <summary>
            表示对日志的调起者
            </summary>
        </member>
        <member name="F:MethodBox.MBLog.DataType.LogStruct.LogInfo">
            <summary>
            表示日志的具体内容
            </summary>
        </member>
        <member name="F:MethodBox.MBLog.DataType.LogStruct.Print">
            <summary>
            表示是否将日志内容打印至控制台上
            </summary>
        </member>
        <member name="F:MethodBox.MBLog.DataType.LogStruct.Save">
            <summary>
            表示是否将日志内容保存至文件
            </summary>
        </member>
        <member name="T:MethodBox.MBLog.DataType.Log">
            <summary>
            表示用于序列化/反序列化的<c>Log</c>实体类。
            </summary>
        </member>
        <member name="P:MethodBox.MBLog.DataType.Log.LogContent">
            <summary>
            表示日志的内容
            </summary>
        </member>
        <member name="P:MethodBox.MBLog.DataType.Log.LogLevel">
            <summary>
            表示日志的等级
            </summary>
        </member>
        <member name="P:MethodBox.MBLog.DataType.Log.DateTime">
            <summary>
            表示日志的生成时间
            </summary>
        </member>
        <member name="T:MethodBox.MBLog.DataType.EventArgs">
            <summary>
            用于表示日志系统的使用事件的事件参数。
            </summary>
        </member>
        <member name="T:MethodBox.MBLog.DataType.EventArgs.SendStringFinishedEventArgs">
            <summary>
            用于表示当日志字符串发送完毕回调事件的事件参数。
            </summary>
        </member>
        <member name="P:MethodBox.MBLog.DataType.EventArgs.SendStringFinishedEventArgs.Response">
            <summary>
            表示发送完毕后服务器的响应。
            </summary>
        </member>
        <member name="T:MethodBox.MBLog.DataType.EventArgs.DangerousLogGenerateEventArgs">
            <summary>
            用于表示当危险日志生成时回调事件的事件参数。
            </summary>
        </member>
        <member name="P:MethodBox.MBLog.DataType.EventArgs.DangerousLogGenerateEventArgs.EventLogStruct">
            <summary>
            表示日志的结构体
            </summary>
        </member>
        <member name="P:MethodBox.MBLog.DataType.EventArgs.DangerousLogGenerateEventArgs.EventLogType">
            <summary>
            表示日志的等级
            </summary>
        </member>
        <member name="T:MethodBox.MBLog.DataType.EventArgs.LogTrackEventArgs">
            <summary>
            表示日志追踪时的事件参数。
            </summary>
        </member>
        <member name="P:MethodBox.MBLog.DataType.EventArgs.LogTrackEventArgs.EventLogStruct">
            <summary>
            表示日志的结构体
            </summary>
        </member>
        <member name="P:MethodBox.MBLog.DataType.EventArgs.LogTrackEventArgs.EventLogType">
            <summary>
            表示日志的等级
            </summary>
        </member>
        <member name="T:MethodBox.MBLog.Interfaces">
            <summary>
            MBLog的公共成员接口类。
            </summary>
        </member>
        <member name="T:MethodBox.MBLog.Interfaces.ILogger">
            <summary>
            用于定义Logger数据类型的接口。
            </summary>
        </member>
        <member name="T:MethodBox.MBLog.Interfaces.IDoubledAttribute">
            <summary>
            用于表示含有日志类型和结构体的事件参数的公共继承接口。
            </summary>
        </member>
        <member name="P:MethodBox.MBLog.Interfaces.IDoubledAttribute.EventLogStruct">
            <summary>
            表示日志的结构体
            </summary>
        </member>
        <member name="P:MethodBox.MBLog.Interfaces.IDoubledAttribute.EventLogType">
            <summary>
            表示日志的等级
            </summary>
        </member>
        <member name="T:MethodBox.MBLog.Logging.Logger">
            <namespace>
             <summary>aaa</summary>
             </namespace>
             <summary>
             表示MBLog中的日志系统执行类。
             </summary>
        </member>
        <member name="T:MethodBox.MBLog.Logging.Logger.LogStringHandler">
            <summary>
            表示一个可用于自定义生成日志字符串方法的委托。
            </summary>
            <param name="logType">产生的日志类型</param>
            <param name="logStruct">产生的日志结构体</param>
            <see cref="T:MethodBox.MBLog.DataType.LogType"/>
            <see cref="T:MethodBox.MBLog.DataType.LogStruct"/>
        </member>
        <member name="T:MethodBox.MBLog.Logging.Logger.DangerousLogHandler">
            <summary>
            表示当产生警告和错误等级的日志时引发的事件所对应的委托签名。
            </summary>
            <param name="sender">发起调用的对象</param>
            <param name="e">包含危险日志信息的事件参数</param>
            <see cref="T:MethodBox.MBLog.DataType.LogType"/>
            <see cref="T:MethodBox.MBLog.DataType.LogStruct"/>
            <seealso cref="M:MethodBox.MBLog.Logging.Logger.Log(MethodBox.MBLog.DataType.LogType,MethodBox.MBLog.DataType.LogStruct)"/>
        </member>
        <member name="E:MethodBox.MBLog.Logging.Logger.OnDangerousLogGenerate">
            <summary>
            表示当产生警告和错误等级的日志但未经过打印和保存处理时引发的事件。
            </summary>
        </member>
        <member name="E:MethodBox.MBLog.Logging.Logger.DangerousLogGenerated">
            <summary>
            表示当产生警告和错误等级的日志但经过打印和保存处理后引发的事件。
            </summary>
        </member>
        <member name="T:MethodBox.MBLog.Logging.Logger.DataTrackHandler">
            <summary>
            表示当产生捕获到指定类型的日志时引发的事件所对应的委托签名。
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="E:MethodBox.MBLog.Logging.Logger.OnCatchSpecificEvent">
            <summary>
            表示当产生捕获到指定类型的日志时引发的事件。
            </summary>
        </member>
        <member name="M:MethodBox.MBLog.Logging.Logger.#ctor(MethodBox.MBLog.DataType.LogFileType,System.String)">
            <summary>
            经过构造函数构造一个Logger实例化对象。请注意：请尽可能使用<c>GetLoggerInstance</c>方法生成
            Logger实例化对象的单例，除非这个对象已被覆盖。
            </summary>
            <param name="logFileType">日志的存储文件类型</param>
            <param name="logFileName">日志的存储文件名</param>
            <example>
            以下示例将生成一个新的Logger实例化对象。请注意：请尽可能使用<c>GetLoggerInstance</c>方法生成
            Logger实例化对象的单例，除非这个对象已被覆盖。如无必要，勿增实体。
            <code>
            ILogger loggerInstance = Logger(LogFileType.TextFile,@"D:\Log\Log.txt");
            </code>
            </example>
        </member>
        <member name="M:MethodBox.MBLog.Logging.Logger.GetLoggerInstance(MethodBox.MBLog.DataType.LogFileType,System.String)">
            <summary>
            以单例模式返回一个Logger的实例化对象。（经过深拷贝）
            </summary>
            <param name="logFileType">表示日志文件类型</param>
            <param name="logFileName">表示要存储日志的文件</param>
            <returns>分配的Logger的实例化对象</returns>
            <example>
            以下示例将生成一个将日志文件存储"D:\Log\log.txt中的在Logger类型的日志实例化对象。
            <code>
            ILogger loggerInstance = GetLoggerInstance(LogFileType.TextFile, @"D:\Log\log.txt");
            Logger Logger = (Logger)loggerInstance;
            </code>
            </example>
        </member>
        <member name="M:MethodBox.MBLog.Logging.Logger.Log(MethodBox.MBLog.DataType.LogType,MethodBox.MBLog.DataType.LogStruct)">
            <summary>
            完成进行日志记录的一系列操作事件。
            </summary>
            <param name="logType">日志的等级类型</param>
            <param name="logStruct">日志结构体</param>
            <example>
            该示例将生成一个由“Console”提示的、类型为“警告”的日志记录，并将其打印在控制台上，最后存储在D:\Log\log.txt中。
            <code>
            ILogger loggerInstance = GetLoggerInstance(LogFileType.TextFile, @"D:\Log\log.txt");
            LogStruct logStruct = new();
            logStruct.CallerInfoStrings = new[] { "Console" };
            logStruct.LogInfo = "用户输入了具有破坏性的指令";
            logStruct.Save = true;
            logStruct.Print = true;
            ((Logger)loggerInstance).Log(LogType.Warning, logStruct);
            </code>
            以下示例将通过订阅事件的方式捕获类型为Warning和Error的日志，并将其发送至网络服务器
            上，并将发送结果以日志的方式处理。
            <code>
            // 获取一个日志类的实例化对象
            Interfaces.ILogger loggerInstance =
            MBLog.Logger.GetLoggerInstance(DataType.LogFileType.TextFile, @"D:\Log");
            Logger Logger = (MBLog.Logger)loggerInstance;
            // 订阅危险日志事件
            Logger.OnDangerousLogGenerate += (o, v) =>
            {
                // 构建日志字符串
                string logResult =
                Logger.BuildLogString(v.EventLogType, v.EventLogStruct);
                // 建立网络实例化对象
                WebRequest WebSender = new WebRequest(new Uri(@"https:icalloptions.top/data"));
                // 订阅相关事件
                WebSender.OnDataSendFinished += (s, e) =>
                {
            #if NET6_0_OR_GREATER
                    ArgumentNullException.ThrowIfNull(e.Response);
            #else
                    if (e.Response is null)
                    {
                        throw new ArgumentException("服务器未返回");
                    }
            #endif
                    DataType.LogStruct webLogStruct = new DataType.LogStruct();
                    webLogStruct.LogInfo = e.Response;
                    webLogStruct.CallerInfoStrings = new[] { "Console", "WebRequest" };
                    webLogStruct.Print = true;
                    webLogStruct.Save = true;
                    // 作为演示，假设成功返回OK，失败返回FAILED
                    DataType.LogType logType = e.Response switch
                    {
                        "OK" => DataType.LogType.Information,
                        "FAILED" => DataType.LogType.Warning,
                        _ => throw new NotImplementedException("未实现对该返回值的处理！")
                    };
                    Logger.Log(logType, webLogStruct);
                };
                // 发送信息
                WebSender.SendLogStringAsync("LogContent", logResult);
            };
            </code>
            </example>
            <see cref="T:MethodBox.MBLog.DataType.LogType"/>
            <see cref="T:MethodBox.MBLog.DataType.LogStruct"/>
        </member>
        <member name="M:MethodBox.MBLog.Logging.Logger.GetTypeString(MethodBox.MBLog.DataType.LogType)">
            <summary>
            将LogType类型转换为相应的日志等级的字符串形式。
            </summary>
            <param name="_"><c>LogType的实例化对象</c></param>
            <returns>转换后的日志等级字符串结果</returns>
            <exception cref="T:System.NotImplementedException">如果传入了错误的LogType枚举值，将引发此异常。</exception>
        </member>
        <member name="M:MethodBox.MBLog.Logging.Logger.WriteToFile(System.Object)">
            <summary>
            将生成的日志内容写入指定的文件的缓冲区。
            </summary>
            <param name="content">需要写入文件的内容</param>
        </member>
        <member name="M:MethodBox.MBLog.Logging.Logger.FlushBuffer">
            <summary>
            将缓冲区内的内容全部写入文件，并清空当前缓冲区。
            </summary>
        </member>
        <member name="M:MethodBox.MBLog.Logging.Logger.Print(System.String)">
            <summary>
            将指定的内容打印在控制台上并重置控制台颜色。
            </summary>
            <param name="content">需要打印的内容</param>
        </member>
        <member name="M:MethodBox.MBLog.Logging.Logger.BuildLogString(MethodBox.MBLog.DataType.LogType,MethodBox.MBLog.DataType.LogStruct)">
            <summary>
            使用给定的数据以通用日志格式生成格式化字符串，当用户设置了自定义
            的日志字符串生成方法时，该方法将自动调起含有委托的重载。
            </summary>
            <param name="logStruct">输入的日志结构</param>
            <param name="logType">输入的日志类型</param>
            <example>
            以下示例将在2023年7月23日 07:55生成一个来自Console的警告字符串：
            2023-07-23 07:55:00 [WARNING][Console]用户输入了具有破坏性的指令
            <code>
            ILogger loggerInstance = GetLoggerInstance(LogFileType.TextFile,@"D:\Log\log.txt");
            LogStruct logStruct = new LogStruct();
            logStruct.CallerInfoStrings = new[] { "Console" };
            logStruct.LogInfo = "用户输入了具有破坏性的指令";
            logStruct.Save = true;
            logStruct.Print = true;
            string logString = ((Logger)loggerInstance).
            BuildLogString(LogType.Warning, logStruct);
            Console.WriteLine(logString);
            </code>
            </example>
            <returns>格式化后的日志字符串</returns>
            <see cref="T:MethodBox.MBLog.DataType.LogType"/>
            <see cref="T:MethodBox.MBLog.DataType.LogStruct"/>
            <seealso cref="T:MethodBox.MBLog.Logging.Logger"/>
        </member>
        <member name="M:MethodBox.MBLog.Logging.Logger.BuildLogString(MethodBox.MBLog.DataType.LogType,MethodBox.MBLog.DataType.LogStruct,MethodBox.MBLog.Logging.Logger.LogStringHandler)">
            <summary>
            给定一个应用程序方法的扩展，用于定义自定义的日志字符串生成方法。
            </summary>
            <param name="logType">输入的日志类型</param>
            <param name="logStruct">输入的日志结构</param>
            <param name="handleFunc">处理方法</param>
            <example>
            以下示例将在2023年7月23日 07:55生成一个来自Console的警告字符串：
            2023-07-23 07:55:00 [WARNING][Console]用户输入了具有破坏性的指令
            <code>
            ILogger loggerInstance = GetLoggerInstance(LogFileType.TextFile,@"D:\Log\log.txt");
            LogStruct logStruct = new LogStruct();
            logStruct.CallerInfoStrings = new[] { "Console" };
            logStruct.LogInfo = "用户输入了具有破坏性的指令";
            logStruct.Save = true;
            logStruct.Print = true;
            string logString = ((Logger)loggerInstance).
            BuildLogString(LogType.Warning, logStruct);
            Console.WriteLine(logString);
            </code>
            </example>
            <returns>格式化后的日志字符串</returns>
            <see cref="T:MethodBox.MBLog.DataType.LogType"/>
            <see cref="T:MethodBox.MBLog.DataType.LogStruct"/>
            <see cref="T:MethodBox.MBLog.Logging.Logger.LogStringHandler"/>
            <seealso cref="T:MethodBox.MBLog.Logging.Logger"/>
        </member>
        <member name="M:MethodBox.MBLog.Logging.Logger.SetHandler(MethodBox.MBLog.Logging.Logger.LogStringHandler)">
            <summary>
            给定一个应用程序方法的扩展，用于给定用户以设置自定义的
            日志字符串生成方法的实例化委托。
            </summary>
            <param name="handleFunc">自定义的日志字符串生成方法</param>
            <example>
            以下示例将使日志字符串只含有时间和日志内容：
            <code>
            public string HandleLogString(LogType logType, LogStruct logStruct)
            {
                StringBuilder builder = new StringBuilder();
                builder.Append(DateTime.Now.ToString("yy-MM-dd HH:mm:ss"));
                builder.Append($" {logStruct.LogInfo}");
                return builder.ToString();
            }
            public void OtherMethod()
            {
                Logger Logger = new Logger(LogFileType.TextFile,@"D:\Log\Log.txt");
                Logger.SetHandler(HandleLogString);
            }
            </code>
            </example>
            <see cref="T:MethodBox.MBLog.Logging.Logger.LogStringHandler"/>
        </member>
        <member name="T:MethodBox.MBLog.Logging.LogTracker">
            <summary>
            用于进行日志跟踪的跟踪器类。
            </summary>
        </member>
        <member name="E:MethodBox.MBLog.Logging.LogTracker.OnSpecificEventCaught">
            <summary>
            当指定事件被跟踪器捕获后执行的事件。
            </summary>
        </member>
        <member name="M:MethodBox.MBLog.Logging.LogTracker.#ctor(MethodBox.MBLog.DataType.TrackType,System.Object,MethodBox.MBLog.Logging.Logger@)">
            <summary>
            创建一个用于日志跟踪的新实例。
            </summary>
            <param name="trackType">表示跟踪所使用的方法类型</param>
            <param name="additionalParam">表示跟踪所使用的方法参数</param>
            <param name="sender">发起调用的主调方，一般传入发起调用的<c>Logger</c>对象本身</param>
        </member>
        <member name="M:MethodBox.MBLog.Logging.LogTracker.StartTrack">
            <summary>
            开始对指定事件进行追踪和筛选。
            </summary>
            <example>
            以下示例将捕获所有日志内容中含有“User”的日志，并将日志内容发送至指定网络服务器。
            <code>
            // 准备相应的事件对象
            // 该事件对象应被公开供别处产生日志
            Logger loggerInstance = (Logger)Logger.GetLoggerInstance(
            LogFileType.TextFile,@"D:\Log\Log.txt");
            // 声明事件追踪器对象
            LogTracker tracker = new LogTracker(TrackType.KeyWord, "User", ref loggerInstance);
            // 订阅有关事件并开始追踪
            tracker.OnSpecificEventCaught += (_, e) =>
            {
                // 建立网络实例化对象
                WebRequest WebSender = new WebRequest(new Uri(@"https:icalloptions.top/data"));
                // 发送信息
                WebSender.SendLogString("LogContent", e.EventLogStruct.LogInfo);
            };
            </code>
            </example>
        </member>
        <member name="M:MethodBox.MBLog.Logging.LogTracker.EndTrack">
            <summary>
            终止对指定事件进行追踪和筛选。
            </summary>
        </member>
        <member name="T:MethodBox.MBLog.Web.WebRequest">
            <summary>
            表示向网络服务器发送日志或从网络服务器接收日志的执行类。
            </summary>
        </member>
        <member name="T:MethodBox.MBLog.Web.WebRequest.SendStringFinishedEventHandler">
            <summary>
            用于定义对于异步化字符串发送方法完成事件的委托签名。
            </summary>
            <param name="sender">调用该委托定义事件的主调方</param>
            <param name="e">返回的结果所对应的事件参数</param>
        </member>
        <member name="E:MethodBox.MBLog.Web.WebRequest.OnDataSendFinished">
            <summary>
            表示于异步化字符串发送方法完成后引发的事件。
            </summary>
        </member>
        <member name="M:MethodBox.MBLog.Web.WebRequest.#ctor(System.Uri)">
            <summary>
            构造一个日志网络服务的实例化对象。
            </summary>
            <param name="sendLogUrl">将日志发送的Uri地址</param>
        </member>
        <member name="M:MethodBox.MBLog.Web.WebRequest.SendLogString(System.String,System.String)">
            <summary>
            以<c>Post</c>模式发送指定的日志内容。
            </summary>
            <param name="key">发起请求的参数名</param>
            <param name="content">发起请求的参数内容</param>
            <example>
            以下示例将生成一条等级为Warning的日志并发送到服务器。
            <code>
            Interfaces.ILogger loggerInstance = Logger.GetLoggerInstance
            (DataType.LogFileType.TextFile, @"D:\Log\Log.txt");
            Logger logger = (Logger)loggerInstance;
            DataType.LogStruct logStruct = new DataType.LogStruct();
            logStruct.LogInfo = "用户删除备份数据";
            logStruct.CallerInfoStrings = new[] { "Console", "Server" };
            logStruct.Print = true;
            logStruct.Save = true;
            string sendLogString = logger.BuildLogString(DataType.LogType.Warning,logStruct);
            WebRequest logSender = new WebRequest(new Uri("https:icalloptions.top/data"));
            logSender.SendLogString("log",sendLogString);
            </code>
            <exception cref="T:System.ArgumentNullException">（仅限于.Net6.0及以上SDK版本）当传入的参数为<c>null</c>时引发此异常。</exception>
            <returns>服务器的响应字符串</returns>
            </example>
        </member>
        <member name="M:MethodBox.MBLog.Web.WebRequest.SendLogStringAsync(System.String,System.String)">
            <summary>
            以异步<c>Post</c>模式发送指定的日志内容。
            </summary>
            <param name="key">发起请求的参数名</param>
            <param name="content">发起请求的参数内容</param>
            <example>
            以下示例将日志内容异步上传至服务器，并以日志的形式通知上传结果。
            <code>
            // 构建日志字符串
            Interfaces.ILogger loggerInstance =
            MBLog.Logger.GetLoggerInstance(DataType.LogFileType.TextFile,@"D:\Log");
            Logger Logger = (MBLog.Logger)loggerInstance;
            string logResult =
            Logger.BuildLogString(DataType.LogType.Warning, new DataType.LogStruct(
                new[] { "Console" }, "nm$l", true, true
            ));
            // 建立网络实例化对象
            WebRequest WebSender = new WebRequest(new Uri(@"https:icalloptions.top/data"));
            // 订阅相关事件
            WebSender.OnDataSendFinished += (s, e) =>
            {
            #if NET6_0_OR_GREATER
                ArgumentNullException.ThrowIfNull(e.Response);
            #else
                if (e.Response is null)
                {
                    throw new ArgumentException("服务器未返回");
                }
            #endif
                DataType.LogStruct webLogStruct = new DataType.LogStruct();
                webLogStruct.LogInfo = e.Response;
                webLogStruct.CallerInfoStrings = new[] { "Console", "WebRequest" };
                webLogStruct.Print = true;
                webLogStruct.Save = true;
                // 作为演示，假设成功返回OK，失败返回FAILED
                DataType.LogType logType = e.Response switch
                {
                    "OK" => DataType.LogType.Information,
                    "FAILED" => DataType.LogType.Warning,
                    _ => throw new NotImplementedException("未实现对该返回值的处理！")
                };
                Logger.Log(logType, webLogStruct);
            };
            // 发送信息
            WebSender.SendLogStringAsync("LogContent",logResult);
            </code>
            </example>
            <exception cref="T:System.ArgumentNullException">（仅限于.Net6.0及以上SDK版本）当传入的参数为<c>null</c>时引发此异常。</exception>
        </member>
    </members>
</doc>
